// Copie e cole TODO este bloco atualizado

(function () {
    // evita duplo carregamento
    if (document.getElementById('bmSplash')) return;

    // --- Constantes ---
    const MIN_DELAY = 0;
    const SCROLL_DELAY = 0;
    const STEP_DELAY = MIN_DELAY;
    const FAST_TYPE_DELAY = 0; // <<< VELOCIDADE MÁXIMA >>>
    const MIN_WRAPPER_WIDTH = 260;
    const MIN_WRAPPER_HEIGHT = 180;
    const ADV_CONTEXT_WORDS = 5;

    // --- Variáveis Globais do Script ---
    let activeEl = null;
    let isCorrectionRunning = false;
    let currentCorrectionResolver = null;
    let correctionSplashEl = null;

    // --- FUNÇÕES AUXILIARES (showCustomAlert e relacionadas mantidas para outros usos) ---
    function showCustomAlert(message, type = 'info', buttons = [{ text: 'OK' }], alertId = 'bmAlertOverlay') { /* ... código mantido ... */ return new Promise((resolve) => { const existingOverlay = document.getElementById(alertId); if (existingOverlay) { existingOverlay.remove(); } const overlay = document.createElement('div'); overlay.id = alertId; overlay.className = 'bmDialogOverlay'; const alertBox = document.createElement('div'); alertBox.className = 'bmDialogBox'; alertBox.classList.add(`bmAlert-${type}`); let iconHtml = ''; switch (type) { case 'error': iconHtml = '<div class="bmDialogIcon error">!</div>'; break; case 'warning': iconHtml = '<div class="bmDialogIcon warning">!</div>'; break; case 'success': iconHtml = '<div class="bmDialogIcon success">✓</div>'; break; case 'question': iconHtml = '<div class="bmDialogIcon question">?</div>'; break; case 'info': default: iconHtml = '<div class="bmDialogIcon info">i</div>'; break; } const messageP = document.createElement('p'); messageP.className = 'bmDialogMessage'; messageP.innerHTML = message; const buttonContainer = document.createElement('div'); buttonContainer.className = 'bmDialogButtonContainer'; buttons.forEach(buttonInfo => { const btn = document.createElement('button'); btn.textContent = buttonInfo.text; btn.className = `bmDialogButton ${buttonInfo.class || ''}`; btn.onclick = () => { alertBox.classList.remove('bmDialogEnter'); alertBox.classList.add('bmDialogExit'); overlay.classList.add('bmDialogFadeOut'); setTimeout(() => { if (document.body.contains(overlay)) { document.body.removeChild(overlay); } resolve(buttonInfo.value !== undefined ? buttonInfo.value : buttonInfo.text); }, 400); }; buttonContainer.appendChild(btn); }); alertBox.innerHTML = iconHtml; alertBox.appendChild(messageP); alertBox.appendChild(buttonContainer); overlay.appendChild(alertBox); document.body.appendChild(overlay); void alertBox.offsetWidth; overlay.classList.add('bmDialogFadeIn'); alertBox.classList.add('bmDialogEnter'); }); }
    function waitForElementToDisappear(selector, timeout = 30000) { /* ... código mantido ... */ return new Promise((resolve, reject) => { const intervalTime = 50; let elapsedTime = 0; const intervalId = setInterval(() => { const element = document.querySelector(selector); if (!element) { clearInterval(intervalId); clearTimeout(timeoutId); resolve("Elemento desapareceu"); } elapsedTime += intervalTime; }, intervalTime); const timeoutId = setTimeout(() => { clearInterval(intervalId); console.log(`Timeout ${timeout}ms esperando ${selector} desaparecer (OK se já desapareceu).`); resolve("Timeout esperando desaparecer (ignorado)"); }, timeout); }); }
    function waitForElement(selector, timeout = 5000) { /* ... código mantido ... */ return new Promise((resolve, reject) => { const startTime = Date.now(); const interval = setInterval(() => { const element = document.querySelector(selector); if (element && element.offsetParent !== null) { clearInterval(interval); resolve(element); } else if (Date.now() - startTime > timeout) { clearInterval(interval); reject(new Error(`Timeout esperando aparecer: ${selector}`)); } }, 50); }); }
    document.addEventListener('mousedown', e => { activeEl = e.target; }, true);
    function dispatchKeyEvent(target, eventType, key, keyCode, charCode = 0) { /* ... código mantido ... */ let effectiveCharCode = charCode; if (!effectiveCharCode && key && key.length === 1) { effectiveCharCode = key.charCodeAt(0); } const event = new KeyboardEvent(eventType, { key: key, code: `Key${key.toUpperCase()}`, keyCode: keyCode, which: keyCode, charCode: eventType === 'keypress' ? effectiveCharCode : 0, bubbles: true, cancelable: true }); try { target.dispatchEvent(event); } catch (e) { console.warn("Falha ao despachar evento:", eventType, key, e); } }
    async function simulateBackspace(targetElement) { /* ... código mantido ... */ if (!targetElement || !document.body.contains(targetElement)) return false; activeEl = targetElement; targetElement.focus({ preventScroll: true }); const start = targetElement.selectionStart; const end = targetElement.selectionEnd; dispatchKeyEvent(targetElement, 'keydown', 'Backspace', 8); let valueChanged = false; if ((targetElement.tagName === 'INPUT' || targetElement.tagName === 'TEXTAREA')) { const currentValue = targetElement.value; let newValue = currentValue; let newCursorPos = start; if (start === end && start > 0) { newValue = currentValue.substring(0, start - 1) + currentValue.substring(end); newCursorPos = start - 1; valueChanged = true; } else if (start !== end) { newValue = currentValue.substring(0, start) + currentValue.substring(end); newCursorPos = start; valueChanged = true; } if (valueChanged) { try { const prototype = Object.getPrototypeOf(targetElement); const descriptor = Object.getOwnPropertyDescriptor(prototype, 'value'); if (descriptor && descriptor.set) { descriptor.set.call(targetElement, newValue); } else { targetElement.value = newValue; } targetElement.selectionStart = targetElement.selectionEnd = newCursorPos; targetElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); targetElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); } catch(e) { console.warn("Erro ao definir valor via descritor no backspace", e); targetElement.value = newValue; targetElement.selectionStart = targetElement.selectionEnd = newCursorPos; targetElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); targetElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); } } } else if (targetElement.isContentEditable) { document.execCommand('delete', false, null); valueChanged = true; } dispatchKeyEvent(targetElement, 'keyup', 'Backspace', 8); if(MIN_DELAY > 0) await new Promise(r => setTimeout(r, MIN_DELAY)); return valueChanged; }
    function sendChar(c) { /* ... código mantido ... */ if (!activeEl || !document.body.contains(activeEl)) { console.warn("sendChar: activeEl inválido ou não está no DOM."); return false; } const targetElement = activeEl; try { targetElement.focus({ preventScroll: true }); } catch (e) { console.warn("sendChar: Falha ao focar:", e); return false; } const keyCode = c.charCodeAt(0); dispatchKeyEvent(targetElement, 'keydown', c, keyCode); dispatchKeyEvent(targetElement, 'keypress', c, keyCode, keyCode); let valueChanged = false; if (targetElement.isContentEditable) { try { document.execCommand('insertText', false, c); valueChanged = true; } catch (e) { console.warn("sendChar: Falha no execCommand('insertText'):", e); return false; } } else if (targetElement.tagName === 'INPUT' || targetElement.tagName === 'TEXTAREA') { const start = targetElement.selectionStart; const end = targetElement.selectionEnd; const currentValue = targetElement.value; const newValue = currentValue.substring(0, start) + c + currentValue.substring(end); try { const prototype = Object.getPrototypeOf(targetElement); const descriptor = Object.getOwnPropertyDescriptor(prototype, 'value'); if (descriptor && descriptor.set) { descriptor.set.call(targetElement, newValue); } else { targetElement.value = newValue; } targetElement.selectionStart = targetElement.selectionEnd = start + c.length; targetElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); targetElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); valueChanged = true; } catch (e) { console.warn("Erro ao definir valor via descritor no sendChar", e); targetElement.value = newValue; targetElement.selectionStart = targetElement.selectionEnd = start + c.length; targetElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); targetElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); valueChanged = true; } } dispatchKeyEvent(targetElement, 'keyup', c, keyCode); return valueChanged; }
    async function clearTextareaSimulated(textareaElement) { /* ... código mantido ... */ if (!textareaElement || !document.body.contains(textareaElement)) return; console.log("Iniciando limpeza simulada da textarea..."); textareaElement.focus({ preventScroll: true }); let currentLength = textareaElement.value.length; const initialLength = currentLength; let backspaceCount = 0; const maxAttempts = initialLength + 5; while (currentLength > 0 && backspaceCount < maxAttempts) { textareaElement.selectionStart = textareaElement.selectionEnd = currentLength; const success = await simulateBackspace(textareaElement); const newLength = textareaElement.value.length; if (newLength < currentLength) { currentLength = newLength; } else { console.warn("Backspace simulado não reduziu o texto. Tentando forçar."); if (currentLength > 0) { const forcedValue = textareaElement.value.slice(0, -1); const prototype = Object.getPrototypeOf(textareaElement); const descriptor = Object.getOwnPropertyDescriptor(prototype, 'value'); if (descriptor && descriptor.set) { descriptor.set.call(textareaElement, forcedValue); } else { textareaElement.value = forcedValue; } textareaElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); textareaElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); currentLength = textareaElement.value.length; } } backspaceCount++; if (backspaceCount % 100 === 0) { console.log(`Limpando... ${currentLength} caracteres restantes.`); } } if (currentLength === 0) { console.log("Textarea limpa com sucesso."); } else { console.warn(`Não foi possível limpar a textarea completamente após ${backspaceCount} tentativas. Restantes: ${currentLength}`); textareaElement.value = ""; textareaElement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true })); textareaElement.dispatchEvent(new Event('change', { bubbles: true, cancelable: true })); } }
    async function typeTextFast(text, targetElement) { /* ... código mantido com FAST_TYPE_DELAY=0 ... */ if (!targetElement || !document.body.contains(targetElement)) { console.error("typeTextFast: Elemento alvo inválido."); return false; } console.log("Iniciando digitação rápida..."); activeEl = targetElement; targetElement.focus({ preventScroll: true }); let success = true; for (let i = 0; i < text.length; i++) { const char = text[i]; const charSuccess = sendChar(char); if (!charSuccess) { console.warn(`Falha ao digitar o caractere rápido: "${char}" na posição ${i}`); } if (FAST_TYPE_DELAY > 0) { await new Promise(r => setTimeout(r, FAST_TYPE_DELAY)); } if (i % 200 === 0 && i > 0) { console.log(`Digitando rápido... ${i}/${text.length}`); } } console.log("Digitação rápida concluída."); return success; }
    async function callPuterAI(textToReview) { /* ... código mantido com a correção anterior ... */ return new Promise((resolve, reject) => { const prompt = `Revise este texto e corrija os minimos detalhes. Não é para mudar NADA, somente os erros ortográficos, mais NADA. Não mude o contexto, não mude NADA. Na sua mensagem, também não mande mais nada. Só mande a correção do texto, nenhuma mensagem ou frase a mais.\n\n${textToReview}`; console.log("Chamando Puter.JS AI..."); const executeAIChat = () => { if (!window.puter || !window.puter.ai || typeof window.puter.ai.chat !== 'function') { return reject(new Error("Puter.JS ou puter.ai.chat não está disponível.")); } puter.ai.chat(prompt) .then(response => { console.log("Puter.JS AI respondeu (raw):", response); let correctedText = null; if (typeof response === 'object' && response !== null && typeof response.message === 'object' && response.message !== null && typeof response.message.content === 'string') { correctedText = response.message.content; console.log("Texto extraído com sucesso de response.message.content."); } else if (typeof response === 'string') { correctedText = response; console.log("A resposta da IA já era uma string (caso inesperado)."); } if (correctedText !== null) { resolve(correctedText.trim()); } else { console.error("Não foi possível extrair texto corrigido da resposta da IA (estrutura inesperada):", response); reject(new Error("Formato de resposta da IA inesperado ou sem conteúdo textual.")); } }) .catch(error => { console.error("Erro ao chamar Puter.JS AI:", error); reject(new Error(`Erro na chamada da IA: ${error.message || error}`)); }); }; if (window.puter) { console.log("Puter.JS já carregado."); executeAIChat(); } else { console.log("Carregando Puter.JS..."); const s = document.createElement('script'); s.src = 'https://js.puter.com/v2/'; s.onload = () => { console.log("Puter.JS carregado com sucesso."); setTimeout(executeAIChat, 100); }; s.onerror = (err) => { console.error("Falha ao carregar Puter.JS:", err); reject(new Error("Não foi possível carregar o script do Puter.JS.")); }; document.body.appendChild(s); } }); }
    // --- NOVAS FUNÇÕES DE UI PARA IA ---
    function removeOverlay(overlayElement) {
        if (overlayElement && document.body.contains(overlayElement)) {
            overlayElement.style.opacity = '0';
            const contentBox = overlayElement.querySelector('.bmAdvSplashContent, #bmAIReviewContent'); // Tenta encontrar a caixa de conteúdo
             if(contentBox) {
                 contentBox.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-in';
                 contentBox.style.opacity = '0';
                 contentBox.style.transform = 'scale(0.9)';
             }
            setTimeout(() => {
                if (overlayElement && document.body.contains(overlayElement)) {
                    document.body.removeChild(overlayElement);
                }
            }, 400); // Tempo para animação de saída
        }
    }

    async function showAIReviewOverlayStyled() {
        return new Promise((resolve) => {
            const overlayId = 'bmAIReviewSplash';
            const existingOverlay = document.getElementById(overlayId);
            if (existingOverlay) existingOverlay.remove();

            const overlay = document.createElement('div');
            overlay.id = overlayId;
            // Estilo de fundo opaco, similar ao #bmAdvCorrectionSplash mas sem blur/transparência no gradiente principal
            overlay.style.cssText = `
                position: fixed; inset: 0;
                background: #0a0514; /* Fundo opaco */
                display: flex; flex-direction: column; align-items: center; justify-content: center;
                z-index: 100001; /* Acima de outros dialogs talvez */
                opacity: 0; transition: opacity 0.5s ease-out;
                font-family: 'Segoe UI', sans-serif; color: #eee; overflow: hidden;
            `;

            overlay.innerHTML = `
                <div id="bmAIReviewContent" class="bmAdvSplashContent" style="opacity:0; transform: scale(0.9) rotateY(10deg); transition: opacity 0.5s ease-out 0.1s, transform 0.5s ease-out 0.1s;">
                    <h2 style="font-size: 2em; margin-bottom: 20px;">Revisão Final pela IA</h2>
                    <p style="font-size: 1.1em; line-height: 1.6; color: #ccc; margin-bottom: 30px;">
                        Ótimo! Você terminou as etapas.<br>
                        Deseja que uma IA dê uma última vistoria no texto?
                    </p>
                    <div class="bmAdvActionButtons" style="border-top: none; padding-top: 15px;">
                        <button id="bmAINoBtn" class="bmAdvActionButton skip">Não</button>
                        <button id="bmAIYesBtn" class="bmAdvActionButton manual">Sim</button> </div>
                </div>`;

            document.body.appendChild(overlay);

            // Força reflow e inicia animação de entrada
            void overlay.offsetWidth;
            overlay.style.opacity = '1';
            const contentBox = overlay.querySelector('#bmAIReviewContent');
            if(contentBox){
                contentBox.style.opacity = '1';
                contentBox.style.transform = 'scale(1) rotateY(0deg)';
            }


            document.getElementById('bmAIYesBtn').onclick = () => {
                resolve(true);
                removeOverlay(overlay);
            };
            document.getElementById('bmAINoBtn').onclick = () => {
                resolve(false);
                removeOverlay(overlay);
            };
        });
    }

    function showAILoadingOverlayStyled() {
        const overlayId = 'bmAILoadingSplash';
        const existingOverlay = document.getElementById(overlayId);
        if (existingOverlay) existingOverlay.remove();

        const overlay = document.createElement('div');
        overlay.id = overlayId;
        overlay.style.cssText = `
            position: fixed; inset: 0;
            background: #0a0514; /* Fundo opaco */
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            z-index: 100002; /* Acima do AI Review */
            opacity: 0; transition: opacity 0.4s ease-in;
            font-family: 'Segoe UI', sans-serif; color: #eee; overflow: hidden;
        `;

        // Reutiliza a estrutura e classes do .bmAdvLoadingState
        overlay.innerHTML = `
            <div id="bmAILoadingContent" class="bmAdvSplashContent" style="padding: 40px 50px; opacity:0; transform: scale(0.9); transition: opacity 0.4s ease-out 0.1s, transform 0.4s ease-out 0.1s;">
                 <div class="bmAdvLoadingState" style="display: flex; position: static; background: none; backdrop-filter: none; border-radius: 0;">
                    <div class="spinner" style="width: 45px; height: 45px; border-width: 5px; margin-bottom: 20px;"></div>
                    <div class="applying-text" style="font-size: 1.4em;">Processando IA...</div>
                 </div>
            </div>`;

        document.body.appendChild(overlay);
        void overlay.offsetWidth;
        overlay.style.opacity = '1';
        const contentBox = overlay.querySelector('#bmAILoadingContent');
         if(contentBox){
             contentBox.style.opacity = '1';
             contentBox.style.transform = 'scale(1)';
         }

        return overlay; // Retorna o elemento para poder removê-lo depois
    }
    // --- FIM DAS NOVAS FUNÇÕES DE UI ---


    // Splash Inicial (Mantido)
    const splash = document.createElement('div'); splash.id = 'bmSplash';
    splash.innerHTML = `<div id="bmSplashContent"><img id="bmSplashImg" src="https://i.imgur.com/RUWcJ6e.png"/> <div id="bmSplashTexts"> <div id="bmSplashTitle">Paraná Tools</div> <div id="bmSplashSubtitle">AutoEditor Simulado</div> </div> <div id="bmLoadingBar"><div id="bmLoadingProgress"></div></div> </div> <div id="bmSplashBgEffect"></div><div class="bmSplashGrid"></div>`;
    document.body.appendChild(splash);

    // --- CSS INJETADO ---
    // O CSS é longo, omitido aqui, mas deve ser EXATAMENTE o mesmo da V1.8
    const css = `
        /* ... (TODO O CSS ANTERIOR É MANTIDO EXATAMENTE IGUAL - V1.8) ... */
        /* Splash Inicial, Diálogos, UI Principal, Countdowns, Overlays, Modos, Splash Correção Avançada, etc. */
        #bmSplashBgEffect { position: absolute; inset: 0; overflow: hidden; z-index: 1; background: radial-gradient(circle, #3a205f 0%, #0a0514 80%); opacity: 0; animation: bgSplashEnterFast 3.5s ease-out forwards; } @keyframes bgSplashEnterFast { 0% { opacity: 0; transform: scale(1.1); } 100% { opacity: 1; transform: scale(1); } } .bmSplashGrid { position: absolute; inset: -200px; z-index: 2; background-image: linear-gradient(rgba(138, 43, 226, 0.07) 1px, transparent 1px), linear-gradient(90deg, rgba(138, 43, 226, 0.07) 1px, transparent 1px); background-size: 55px 55px; opacity: 0; animation: gridFadeMoveFast 4s ease-out forwards 0.1s; } @keyframes gridFadeMoveFast { 0% { opacity: 0; background-position: 0 0; } 50% { opacity: 0.5; } 100% { opacity: 0.3; background-position: -110px -110px; } } #bmSplash { position: fixed; inset: 0; background:transparent; display:flex; align-items:center; justify-content:center; z-index:99999; overflow:hidden; animation: splashHideFast 0.6s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards 3.5s; } #bmSplashContent { z-index: 3; display:flex; flex-direction:column; align-items:center; justify-content:center; perspective: 1000px; } #bmSplashImg { width:170px; margin-bottom: 20px; filter: drop-shadow(0 7px 28px rgba(160, 86, 247, 0.75)); opacity: 0; transform: scale(0.6) rotateZ(-45deg) translateY(60px); animation: logoSuperEntryFast 1.6s cubic-bezier(0.175, 0.885, 0.32, 1.3) forwards 0.3s, logoFloatBob 2s ease-in-out infinite alternate 2s; } @keyframes logoSuperEntryFast { 0% { opacity: 0.5; transform: scale(0.6) rotateZ(-45deg) translateY(60px); } 60% { opacity: 1; transform: scale(1.18) rotateZ(15deg) translateY(0px); } 80% { transform: scale(0.96) rotateZ(-8deg); } 100% { opacity: 1; transform: scale(1) rotateZ(0deg); } } @keyframes logoFloatBob { from { transform: translateY(0px) scale(1); filter: drop-shadow(0 7px 28px rgba(160, 86, 247, 0.75)); } to { transform: translateY(-7px) scale(1.02); filter: drop-shadow(0 11px 33px rgba(160, 86, 247, 0.85)); } } #bmSplashTexts { opacity: 0; transform: translateY(25px) scale(0.9); animation: textsSuperAppearFast 0.8s cubic-bezier(0.23, 1, 0.32, 1) forwards 1.8s; text-align: center; } #bmSplashTitle { font-size: 2.7em; font-weight: 900; letter-spacing: 1px; margin-bottom: 4px; font-family:'Segoe UI Black', Arial, sans-serif; color:#fff; text-shadow: 0 0 12px rgba(220, 180, 255, 0.8); background: linear-gradient(45deg, #e0cffc, #b37ffc); -webkit-background-clip: text; -webkit-text-fill-color: transparent; } #bmSplashSubtitle { font-size: 1.4em; font-weight: 300; color: #e5d9ff; font-family:'Segoe UI Light', Arial, sans-serif; letter-spacing: 0.8px; animation: subtitleGlow 2s ease-in-out infinite alternate 2.5s; } @keyframes textsSuperAppearFast { to { opacity: 1; transform: translateY(0) scale(1); } } @keyframes subtitleGlow { from { opacity: 0.8; } to { opacity: 1; text-shadow: 0 0 7px rgba(220, 180, 255, 0.7); } } #bmLoadingBar { width: 250px; height: 7px; background-color: rgba(255, 255, 255, 0.1); border-radius: 3.5px; margin-top: 35px; overflow: hidden; opacity: 0; transform: scaleX(0); animation: barSuperAppear 0.6s ease-out forwards 2.8s; box-shadow: inset 0 1px 2px rgba(0,0,0,0.3); } #bmLoadingProgress { width: 0%; height: 100%; background: linear-gradient(90deg, #b37ffc, #f0dfff); border-radius: 3.5px; animation: loadingAnimFinalFast 0.8s cubic-bezier(0.65, 0.05, 0.36, 1) forwards 3.0s; position: relative; overflow: hidden;} #bmLoadingProgress::after { content: ''; position: absolute; top: 0; left: -50%; width: 50%; height: 100%; background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 50%, rgba(255,255,255,0) 100%); transform: skewX(-25deg); animation: shimmer 1.2s infinite; animation-delay: 3.2s;} @keyframes barSuperAppear { to { opacity: 1; transform: scaleX(1); } } @keyframes loadingAnimFinalFast { from { width: 0%; } to { width: 100%; } } @keyframes shimmer { 0% { left: -70%; } 100% { left: 120%; } } @keyframes splashHideFast { from { opacity: 1; } to { opacity: 0; visibility: hidden; } }
        .bmDialogOverlay { position: fixed; inset: 0; background: rgba(10, 5, 20, 0.8); backdrop-filter: blur(7px); -webkit-backdrop-filter: blur(7px); display: flex; align-items: center; justify-content: center; z-index: 100001; opacity: 0; pointer-events: none; transition: opacity 0.4s ease-out; } .bmDialogOverlay.bmDialogFadeIn { opacity: 1; pointer-events: auto; } .bmDialogOverlay.bmDialogFadeOut { opacity: 0; pointer-events: none; } .bmDialogBox { background: linear-gradient(150deg, #333338, #212124); color: #fff; padding: 35px 45px 40px 45px; border-radius: 14px; border: 1px solid #555a60; box-shadow: 0 15px 50px rgba(0, 0, 0, 0.85); min-width: 340px; max-width: 520px; text-align: center; font-family: 'Segoe UI', sans-serif; opacity: 0; transform: scale(0.75) translateY(-35px) rotateX(-25deg); transition: opacity 0.45s cubic-bezier(0.175, 0.885, 0.32, 1.275), transform 0.45s cubic-bezier(0.175, 0.885, 0.32, 1.275); } .bmDialogBox.bmDialogEnter { opacity: 1; transform: scale(1) translateY(0) rotateX(0deg); } .bmDialogBox.bmDialogExit { opacity: 0; transform: scale(0.9) translateY(20px) rotateX(15deg); } .bmDialogIcon { width: 50px; height: 50px; border-radius: 50%; margin: 0 auto 22px auto; display: flex; align-items: center; justify-content: center; font-size: 1.8em; font-weight: bold; color: #fff; box-shadow: 0 5px 15px rgba(0,0,0,0.5); animation: iconPopIn 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) 0.2s backwards; } @keyframes iconPopIn { from { transform: scale(0.5); opacity: 0; } to { transform: scale(1); opacity: 1; } } .bmDialogIcon.info { background: linear-gradient(135deg, #58a6ff, #3c8ce7); } .bmDialogIcon.success { background: linear-gradient(135deg, #56d364, #2ea043); } .bmDialogIcon.warning { background: linear-gradient(135deg, #f1c40f, #d4ac0d); color: #333; } .bmDialogIcon.error { background: linear-gradient(135deg, #e74c3c, #c0392b); } .bmDialogIcon.question { background: linear-gradient(135deg, #8e44ad, #9b59b6); } .bmDialogMessage { font-size: 1.2em; line-height: 1.65; margin: 0 0 35px 0; color: #eee; } .bmDialogButtonContainer { display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; } .bmDialogButton { padding: 12px 30px; font-size: 1em; font-weight: bold; background: linear-gradient(145deg, #9a3bf6, #7022b6); border: none; border-radius:9px; color: #fff; text-shadow: 0 1px 3px rgba(0,0,0,0.4); cursor:pointer; transition: all 0.15s ease-out; box-shadow: 0 4px 9px rgba(0,0,0,0.6), inset 0 1px 1px rgba(255,255,255,0.15); letter-spacing: 0.5px; } .bmDialogButton:hover { filter: brightness(1.25) saturate(1.2); transform: translateY(-2px) scale(1.03); box-shadow: 0 7px 14px rgba(138, 43, 226, 0.5), inset 0 1px 1px rgba(255,255,255,0.25); } .bmDialogButton:active { transform: translateY(0px) scale(0.98); filter: brightness(0.9); box-shadow: 0 2px 5px rgba(138, 43, 226, 0.4), inset 0 1px 2px rgba(0,0,0,0.2); } .bmDialogButton.secondary { background: linear-gradient(145deg, #777, #555); } .bmDialogButton.secondary:hover { filter: brightness(1.15); box-shadow: 0 7px 14px rgba(100, 100, 100, 0.4), inset 0 1px 1px rgba(255,255,255,0.15); } .bmDialogButton.secondary:active { filter: brightness(0.9); box-shadow: 0 2px 5px rgba(100, 100, 100, 0.3), inset 0 1px 2px rgba(0,0,0,0.2); }
        #bmWrapper { position:fixed; top:15px; right:15px; width: ${MIN_WRAPPER_WIDTH}px; min-width: ${MIN_WRAPPER_WIDTH}px; border:1px solid #555; border-radius:12px; box-shadow:0 10px 40px rgba(0,0,0,0.8); font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; color:#f0f0f0; opacity:0; transform: perspective(900px) translateX(80px) rotateY(-30deg) scale(0.9); transition:opacity 0.7s cubic-bezier(0.165, 0.84, 0.44, 1), transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1); z-index:99998; overflow: hidden; background: linear-gradient(155deg, #2a2a2f, #1a1a1d); } #bmWrapper.show { opacity:1; transform: perspective(900px) translateX(0) rotateY(0deg) scale(1); } #bmWrapper > div:not(#bmResizeHandle) { border-radius: inherit; overflow: hidden; } #bmHeader { cursor:move; padding: 8px 12px; background: rgba(12, 12, 14, 0.9); backdrop-filter: blur(7px); border-bottom:1px solid #555; font-size: 0.95em; font-weight: 600; text-align:center; border-radius:12px 12px 0 0; user-select: none; position: relative; display: flex; align-items: center; justify-content: center; } #bmHeader span:not(#bmMinimizeBtn) { flex-grow: 1; text-align: center; color: #f5f5f5; text-shadow: 0 1px 1px rgba(0,0,0,0.6); } #bmMinimizeBtn { font-size: 1.5em; font-weight: bold; color: #bbb; cursor: pointer; padding: 0 6px; line-height: 1; transition: color 0.2s ease, transform 0.35s cubic-bezier(0.175, 0.885, 0.32, 1.275); user-select: none; margin-left: auto; transform: translateY(-1px) rotate(0deg); } #bmMinimizeBtn:hover { color: #fff; transform: translateY(-1px) scale(1.2) rotate(180deg); } #bmWrapper.minimized #bmMinimizeBtn { transform: translateY(-1px) rotate(180deg); } #bmWrapper.minimized #bmMinimizeBtn:hover { transform: translateY(-1px) scale(1.2) rotate(0deg); } #bmWrapper.minimized { height: auto !important; min-height: 0 !important; background: rgba(12, 12, 14, 0.95); border-color: #555; } #bmWrapper.minimized #bmContent { opacity: 0; padding-top: 0; padding-bottom: 0; max-height: 0; border-width: 0; margin: 0; overflow: hidden; } #bmWrapper.minimized #bmHeader { border-bottom: none; border-radius: 12px; } #bmContent { padding: 12px; background:rgba(40, 40, 45, 0.98); border-radius: 0 0 12px 12px; transition: opacity 0.3s ease-out, padding 0.3s ease-out, max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1); max-height: 450px; overflow-y: auto; overflow-x: hidden; } #bmContent textarea, #bmContent input[type="number"] { width:100%; margin-bottom:10px; padding:8px; font-size: 0.9em; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; background:rgba(18, 18, 20, 0.9); border:1px solid #606066; border-radius:7px; color:#f8f8f8; box-sizing:border-box; resize: vertical; transition: all 0.3s ease; box-shadow: inset 0 2px 5px rgba(0,0,0,0.7); } #bmContent textarea { min-height: 60px; } #bmContent textarea:focus, #bmContent input[type="number"]:focus { outline:none; border-color: #c89bff; background-color: rgba(0,0,0,0.8); box-shadow: 0 0 0 4px rgba(199, 155, 255, 0.3), inset 0 2px 5px rgba(0,0,0,0.7); } #bmContent button { width:100%; padding:10px; margin-top: 6px; font-size:0.95em; font-weight: bold; background: linear-gradient(145deg, #a056f7, #7a2fd0); border: none; border-radius:8px; color: #fff; text-shadow: 0 1px 3px rgba(0,0,0,0.5); cursor:pointer; transition: all 0.1s ease-out; box-sizing: border-box; box-shadow: 0 4px 10px rgba(0,0,0,0.7), inset 0 1px 1px rgba(255,255,255,0.2); letter-spacing: 0.5px; } #bmContent button:disabled { cursor: not-allowed; opacity: 0.4; background: #555 !important; box-shadow: inset 0 2px 4px rgba(0,0,0,0.4) !important; transform: none !important; color: #999; filter: grayscale(80%); } #bmContent button:not(:disabled):hover { filter: brightness(1.3) saturate(1.3); transform: translateY(-3px) scale(1.02); box-shadow: 0 9px 20px rgba(138, 43, 226, 0.6), inset 0 1px 1px rgba(255,255,255,0.3); } #bmContent button:not(:disabled):active { transform: translateY(0px) scale(0.97); filter: brightness(0.85); box-shadow: 0 2px 5px rgba(138, 43, 226, 0.5), inset 0 1px 3px rgba(0,0,0,0.3); } #bmToggleWrapper, #bmDarkModeToggleWrapper { display:flex; align-items:center; gap:8px; margin-bottom:10px; cursor: pointer; padding: 6px 8px; border-radius: 8px; transition: background-color 0.25s ease; } #bmToggleWrapper:hover, #bmDarkModeToggleWrapper:hover { background-color: rgba(138, 43, 226, 0.2); } #bmToggleImg, #bmDarkModeToggleImg { width:16px; height:16px; border:2px solid #a056f7; border-radius:5px; background:transparent; transition: all .3s cubic-bezier(0.175, 0.885, 0.32, 1.275); display: flex; align-items: center; justify-content: center; flex-shrink: 0; position: relative; } #bmToggleImg.active::after, #bmDarkModeToggleImg.active::after { content: '✔'; position: absolute; font-size: 11px; color: #fff; text-shadow: 0 0 4px rgba(0,0,0,0.5); opacity: 0; transform: scale(0.5) rotate(-180deg); animation: checkSuperAppear 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards 0.1s; } #bmToggleImg.active, #bmDarkModeToggleImg.active { background: #a056f7; border-color: #c89bff; transform: rotate(10deg) scale(1.05); box-shadow: 0 0 8px rgba(160, 86, 247, 0.5); } @keyframes checkSuperAppear { to { opacity: 1; transform: scale(1) rotate(0deg); } } #bmToggleText, #bmDarkModeToggleText { font-size:0.9em; color:#f0f0f0; user-select:none; line-height: 1.2; font-weight: 500; } .bmCountdownNumber { position: absolute; bottom: 50px; left: 50%; transform: translateX(-50%); font-family: 'Segoe UI Black', sans-serif; color: #8A2BE2; font-size: 2.5em; opacity: 0; animation: countPopZoom 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; z-index: 10; text-shadow: 0 0 10px rgba(138, 43, 226, 0.7); } @keyframes countPopZoom { 0% { opacity: 0; transform: translateX(-50%) scale(0.5) rotate(-15deg); } 60% { opacity: 1; transform: translateX(-50%) scale(1.1) rotate(5deg); } 100% { opacity: 0; transform: translateX(-50%) scale(1) rotate(0deg); } } .bmCorrectionCountdownNumber { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); font-family: 'Segoe UI Black', sans-serif; color: #4ecdc4; font-size: 5em; opacity: 0; animation: correctionCountPop 0.9s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; z-index: 100002; text-shadow: 0 0 15px rgba(78, 205, 196, 0.7); pointer-events: none; } @keyframes correctionCountPop { 0% { opacity: 0; transform: translate(-50%, -50%) scale(0.6) rotate(10deg); } 60% { opacity: 1; transform: translate(-50%, -50%) scale(1.1) rotate(-3deg); } 100% { opacity: 0; transform: translate(-50%, -50%) scale(1) rotate(0deg); } }
        #bmOv { position:fixed;top:0;left:0; width:100%;height:100%; background:rgba(0,0,0,.9); backdrop-filter: blur(5px); -webkit-backdrop-filter: blur(5px); display:flex;flex-direction:column; align-items:center;justify-content:center; z-index:100000; opacity: 0; animation: ovFadeInSmooth 0.5s ease-out forwards; } #bmOvContent { opacity: 0; transform: translateY(20px); animation: ovContentSlideUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards 0.3s; text-align: center; } #bmOv img { max-width:60%; max-height:45%; border-radius: 5px; box-shadow: 0 5px 15px rgba(0,0,0,0.4); } #bmOv p { color: #ddd; font-family: 'Segoe UI', sans-serif; text-align: center; margin-top: 20px; max-width: 400px; line-height: 1.5; } #bmOv button { margin-top:25px; padding: 10px 25px; font-size: 1em; background: #8A2BE2; border: none; border-radius: 5px; color: #fff; cursor: pointer; transition: background 0.2s ease, transform 0.15s ease; font-weight: bold; width: auto; } #bmOv button:hover { background:#7022b6; transform:scale(1.05); } #bmOv button:active { transform: scale(0.98); } @keyframes ovFadeInSmooth { from{opacity:0} to{opacity:1} } @keyframes ovContentSlideUp { from{opacity:0; transform: translateY(20px);} to{opacity:1; transform: translateY(0);} }
        #bmWrapper.stealth-mode { background: #f0f0f0; border-color: #ccc; color: #333; animation: none; } #bmWrapper.stealth-mode #bmHeader { background: #dcdcdc; border-color: #ccc; color: #333; } #bmWrapper.stealth-mode #bmContent { background: #e9e9e9; } #bmWrapper.stealth-mode textarea, #bmWrapper.stealth-mode input[type="number"] { background: #fff; border-color: #bbb; color: #222; box-shadow: inset 0 1px 2px rgba(0,0,0,0.1); } #bmWrapper.stealth-mode textarea:focus, #bmWrapper.stealth-mode input[type="number"]:focus { border-color: #666; background-color: #fff; box-shadow: 0 0 0 3px rgba(100, 100, 100, 0.2), inset 0 1px 2px rgba(0,0,0,0.1); } #bmWrapper.stealth-mode button { border: 1px solid #999; color: #444; background: #e0e0e0; box-shadow: none; text-shadow: none; background-image: none; } #bmWrapper.stealth-mode button:disabled { border-color: #ccc; color: #999; background: #f0f0f0; } #bmWrapper.stealth-mode button:not(:disabled):hover { background: #ccc; color: #111; border-color: #777; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15); transform: translateY(-1px); } #bmWrapper.stealth-mode button:not(:disabled):active { background: #bbb; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); transform: translateY(0px) scale(0.99); } #bmWrapper.stealth-mode #bmToggleWrapper:hover, #bmWrapper.stealth-mode #bmDarkModeToggleWrapper:hover { background-color: rgba(0, 0, 0, 0.05); } #bmWrapper.stealth-mode #bmToggleImg, #bmWrapper.stealth-mode #bmDarkModeToggleImg { border-color: #999; } #bmWrapper.stealth-mode #bmToggleImg.active, #bmWrapper.stealth-mode #bmDarkModeToggleImg.active { background: #777; border-color: #777; transform: scale(0.9); } #bmWrapper.stealth-mode #bmToggleImg.active::after, #bmWrapper.stealth-mode #bmDarkModeToggleImg.active::after { color: #f0f0f0; } #bmWrapper.stealth-mode #bmToggleText, #bmWrapper.stealth-mode #bmDarkModeToggleText { color: #555; } #bmWrapper.stealth-mode.minimized #bmHeader { background: #dcdcdc; }
        body.bm-dark-mode { background-color: #1a1a1a; color: #e0e0e0; } body.bm-dark-mode input, body.bm-dark-mode textarea, body.bm-dark-mode select, body.bm-dark-mode button { background-color: #333; color: #f0f0f0; border-color: #555; } body.bm-dark-mode a { color: #6bbafa; }

        /* SPLASH CORREÇÃO AVANÇADA */
        /* A classe .bmAdvSplashContent é reutilizada pelos novos overlays da IA */
        #bmAdvCorrectionSplash { position: fixed; inset: 0; background: radial-gradient(circle at 50% 0%, #3a205f 0%, #0a0514 70%); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); display: flex; flex-direction: column; align-items: center; justify-content: center; z-index: 100000; opacity: 0; transition: opacity 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94); font-family: 'Segoe UI', sans-serif; color: #eee; overflow: hidden; perspective: 1200px; } #bmAdvCorrectionSplash::before { content: ''; position: absolute; inset: -250px; z-index: 1; background-image: linear-gradient(rgba(138, 43, 226, 0.04) 1px, transparent 1px), linear-gradient(90deg, rgba(138, 43, 226, 0.04) 1px, transparent 1px); background-size: 60px 60px; animation: gridFadeMoveAdvCorrection 15s linear infinite alternate; } @keyframes gridFadeMoveAdvCorrection { 0% { background-position: 0 0; opacity: 0; } 50% { opacity: 0.5; } 100% { background-position: -120px -120px; opacity: 0; } } #bmAdvCorrectionSplash.visible { opacity: 1; } .bmAdvSplashContent { /* Estilo base compartilhado */ z-index: 2; text-align: center; padding: 30px; max-width: 800px; width: 90%; background: rgba(26, 26, 29, 0.8); /* Um pouco mais opaco talvez? */ border: 1px solid rgba(138, 43, 226, 0.3); border-radius: 18px; box-shadow: 0 10px 40px rgba(0,0,0,0.6), inset 0 0 15px rgba(138, 43, 226, 0.1); position: relative; } #bmAdvSplashContent { /* Animação só para o splash original */ transform: scale(0.9) rotateY(15deg); opacity: 0; animation: advSplashContentEntry 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) 0.2s forwards; } @keyframes advSplashContentEntry { from { transform: scale(0.9) rotateY(15deg) translateY(20px); opacity: 0; } to { transform: scale(1) rotateY(0deg) translateY(0); opacity: 1; } } #bmAdvSplashContent h2 { font-size: 2.2em; font-weight: 700; color: #e0cffc; margin: 0 0 25px 0; text-shadow: 0 0 15px rgba(160, 86, 247, 0.8); opacity: 0; transform: translateY(-15px); animation: advHeaderFadeSlideIn 0.7s ease-out 0.5s forwards, advPulseGlow 2.8s ease-in-out infinite alternate 1.2s; } @keyframes advHeaderFadeSlideIn { to { opacity: 1; transform: translateY(0); } } @keyframes advPulseGlow { from { opacity: 0.9; text-shadow: 0 0 15px rgba(160, 86, 247, 0.8); } to { opacity: 1; text-shadow: 0 0 20px rgba(200, 150, 255, 0.9); } } .bmAdvContextDisplay { font-family: 'Georgia', 'Times New Roman', serif; font-size: 1.3em; line-height: 1.7; color: #ccc; margin-bottom: 30px; padding: 18px 25px; background: rgba(0,0,0, 0.25); border-radius: 10px; border: 1px dashed rgba(255,255,255,0.15); opacity: 0; transform: scale(0.95); animation: advContextAppear 0.6s ease-out 0.8s forwards; transition: background-color 0.3s ease, opacity 0.3s ease, transform 0.3s ease; min-height: 5em; } .bmAdvContextDisplay:hover { background-color: rgba(0,0,0, 0.3); } @keyframes advContextAppear { to { opacity: 1; transform: scale(1); } } .bmAdvContextDisplay .error-word { display: inline-block; background: linear-gradient(120deg, rgba(231, 76, 60, 0.8), rgba(192, 57, 43, 0.9)); color: #fff; padding: 0.1em 0.3em; margin: -0.1em -0.3em; border-radius: 5px; font-weight: bold; text-shadow: 0 1px 2px rgba(0,0,0,0.4); box-shadow: 0 2px 5px rgba(0,0,0,0.3); transition: transform 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275), background 0.3s ease; } .bmAdvContextDisplay:hover .error-word { transform: scale(1.05) rotate(-1deg); background: linear-gradient(120deg, rgba(231, 76, 60, 0.9), rgba(192, 57, 43, 1)); } .bmAdvContextDisplay .context-before, .bmAdvContextDisplay .context-after { opacity: 0.7; transition: opacity 0.3s ease; } .bmAdvContextDisplay:hover .context-before, .bmAdvContextDisplay:hover .context-after { opacity: 0.9; } .bmAdvOptionsContainer { margin-top: 25px; opacity: 0; transform: translateY(20px); animation: advOptionsFadeSlideIn 0.7s ease-out 1.1s forwards; } @keyframes advOptionsFadeSlideIn { to { opacity: 1; transform: translateY(0); } } .bmAdvSuggestionButtons { display: flex; flex-wrap: wrap; justify-content: center; gap: 15px; margin-bottom: 25px; } .bmAdvSuggestionButton { padding: 10px 22px; font-size: 1.05em; font-weight: 600; background: linear-gradient(140deg, #4CAF50, #2E7D32); border: none; border-radius: 8px; color: #fff; text-shadow: 0 1px 2px rgba(0,0,0,0.4); cursor:pointer; transition: all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275); box-shadow: 0 5px 12px rgba(0,0,0,0.5); transform: scale(1); } .bmAdvSuggestionButton:hover { filter: brightness(1.2) saturate(1.1); transform: translateY(-4px) scale(1.05) rotate(-2deg); box-shadow: 0 9px 20px rgba(46, 125, 50, 0.5); } .bmAdvSuggestionButton:active { transform: translateY(0px) scale(0.96) rotate(1deg); filter: brightness(0.9); box-shadow: 0 2px 5px rgba(46, 125, 50, 0.4); } .bmAdvActionButtons { display: flex; justify-content: center; gap: 20px; margin-top: 20px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 25px; } .bmAdvActionButton { padding: 9px 25px; font-size: 0.95em; font-weight: bold; border: none; border-radius: 7px; color: #fff; cursor:pointer; transition: all 0.15s ease-out; box-shadow: 0 4px 8px rgba(0,0,0,0.4); letter-spacing: 0.5px; } .bmAdvActionButton.manual { background: linear-gradient(140deg, #f39c12, #d35400); } .bmAdvActionButton.manual:hover { filter: brightness(1.2); transform: translateY(-2px) scale(1.03); box-shadow: 0 7px 14px rgba(211, 84, 0, 0.4); } .bmAdvActionButton.manual:active { transform: translateY(0px) scale(0.98); filter: brightness(0.9); box-shadow: 0 2px 5px rgba(211, 84, 0, 0.3); } .bmAdvActionButton.skip { background: linear-gradient(140deg, #5D6D7E, #34495E); } .bmAdvActionButton.skip:hover { filter: brightness(1.15); transform: translateY(-2px) scale(1.03); box-shadow: 0 7px 14px rgba(52, 73, 94, 0.35); } .bmAdvActionButton.skip:active { transform: translateY(0px) scale(0.98); filter: brightness(0.9); box-shadow: 0 2px 5px rgba(52, 73, 94, 0.3); } .bmAdvLoadingState { display: none; flex-direction: column; align-items: center; justify-content: center; position: absolute; inset: 0; background: rgba(10, 5, 20, 0.85); backdrop-filter: blur(5px); border-radius: inherit; z-index: 10; transition: opacity 0.3s ease-in; } .bmAdvLoadingState .spinner { width: 50px; height: 50px; border: 6px solid rgba(255, 255, 255, 0.2); border-left-color: #a056f7; border-radius: 50%; animation: spin 0.8s linear infinite; margin-bottom: 25px; } .bmAdvLoadingState .applying-text { font-size: 1.6em; color: #ddd; letter-spacing: 0.8px; animation: advPulseGlow 2s ease-in-out infinite alternate; } @keyframes spin { to { transform: rotate(360deg); } } @keyframes advButtonPopIn { from { opacity: 0; transform: scale(0.8) rotate(-15deg); } to { opacity: 1; transform: scale(1) rotate(0deg); } } @keyframes advActionButtonSlideIn { from { opacity: 0; transform: translateX(var(--slide-direction, -20px)); } to { opacity: 1; transform: translateX(0); } } .bmAdvActionButton.manual { --slide-direction: -20px; } .bmAdvActionButton.skip { --slide-direction: 20px; }

        /* Animação entrada elementos UI Principal */
        .bmFadeInSlideUp { opacity: 0; transform: translateY(15px); animation: fadeInSlideUpItem 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards; } @keyframes fadeInSlideUpItem { to { opacity: 1; transform: translateY(0); } }
    `;
    const styleTag = document.createElement('style'); styleTag.textContent = css; document.head.appendChild(styleTag);

    // --- LÓGICA PRINCIPAL E UI ---
    const splashTimeout = 3800;
    setTimeout(() => {
        if (document.body.contains(splash)) { splash.remove(); }
        const wrapper = document.createElement('div'); wrapper.id = 'bmWrapper';
        wrapper.innerHTML = `
            <div id="bmHeader"><span>Paraná Colado V1.9</span><span id="bmMinimizeBtn" title="Minimizar/Expandir">-</span></div> <div id="bmContent">
                <textarea id="bmText" placeholder="Cole o texto aqui..." class="bmFadeInSlideUp" style="animation-delay: 0.1s;"></textarea>
                <input id="bmDelay" type="number" step="0.001" value="0.001" min="0.001" placeholder="Delay (s)" class="bmFadeInSlideUp" style="animation-delay: 0.15s;">
                <div id="bmToggleWrapper" class="bmFadeInSlideUp" style="animation-delay: 0.2s;"><div id="bmToggleImg"></div> <span id="bmToggleText">Modo Disfarçado</span></div>
                <div id="bmDarkModeToggleWrapper" class="bmFadeInSlideUp" style="animation-delay: 0.25s;"><div id="bmDarkModeToggleImg"></div> <span id="bmDarkModeToggleText">Modo Escuro Página</span></div>
                <button id="bmBtn" class="bmFadeInSlideUp" style="animation-delay: 0.3s;">Iniciar Digitação</button>
                <button id="bmBtnCorrect" class="bmFadeInSlideUp" style="animation-delay: 0.35s;">Corrigir Automaticamente</button>
            </div>
        `;
        document.body.appendChild(wrapper);
        const bmContent = document.getElementById('bmContent'); const bmMinimizeBtn = document.getElementById('bmMinimizeBtn'); const header = document.getElementById('bmHeader'); setTimeout(() => wrapper.classList.add('show'), 50);
        // Lógicas de Arrastar, Minimizar, Modo Disfarçado, Dark Mode (Mantidas)
        let isDragging = false; let dragStartX, dragStartY, initialLeft, initialTop; header.onmousedown = e => { if (e.target === bmMinimizeBtn || bmMinimizeBtn.contains(e.target)) return; isDragging = true; dragStartX = e.clientX; dragStartY = e.clientY; initialLeft = wrapper.offsetLeft; initialTop = wrapper.offsetTop; header.style.cursor = 'grabbing'; document.addEventListener('mousemove', onDragMove); document.addEventListener('mouseup', onDragUp); e.preventDefault(); }; function onDragMove(e) { if (!isDragging) return; const dx = e.clientX - dragStartX; const dy = e.clientY - dragStartY; wrapper.style.left = initialLeft + dx + 'px'; wrapper.style.top = initialTop + dy + 'px'; } function onDragUp() { if (isDragging) { isDragging = false; header.style.cursor = 'move'; document.removeEventListener('mousemove', onDragMove); document.removeEventListener('mouseup', onDragUp); } }
        if(bmMinimizeBtn && wrapper){ bmMinimizeBtn.onclick = (e) => { e.stopPropagation(); const isMinimized = wrapper.classList.toggle('minimized'); bmMinimizeBtn.textContent = isMinimized ? '+' : '-'; bmMinimizeBtn.title = isMinimized ? 'Expandir' : 'Minimizar'; if (stealthOn) { setTimeout(() => { try { rect = wrapper.classList.contains('minimized') ? header.getBoundingClientRect() : wrapper.getBoundingClientRect(); } catch(err){ console.warn("Erro ao obter rect no modo disfarçado minimizado.")} }, 360); } }; }
        const toggleWrapper = document.getElementById('bmToggleWrapper'); const toggleBox = document.getElementById('bmToggleImg'); let stealthOn = false; let firstTimeStealth = true; let rect = null; function handleStealthMouseMove(ev) { if (!ev || typeof ev.clientX === 'undefined' || typeof ev.clientY === 'undefined') { return; } if (!stealthOn || !wrapper || !document.body.contains(wrapper)) { exitStealth(); return; } try { if (!rect) { rect = wrapper.classList.contains('minimized') ? header.getBoundingClientRect() : wrapper.getBoundingClientRect(); if (!rect || rect.width === 0 || rect.height === 0) return; } const mouseX = ev.clientX; const mouseY = ev.clientY; const isInside = (rect && mouseX >= rect.left && mouseX <= rect.right && mouseY >= rect.top && mouseY <= rect.bottom); if (isInside) { if (wrapper.style.opacity === '0') { wrapper.style.opacity = 1; wrapper.style.pointerEvents = 'auto'; } } else { if (wrapper.style.opacity !== '0') { rect = wrapper.classList.contains('minimized') ? header.getBoundingClientRect() : wrapper.getBoundingClientRect(); if (rect && rect.width > 0 && rect.height > 0) { wrapper.style.opacity = 0; wrapper.style.pointerEvents = 'none'; } } } } catch(err){ console.warn("Erro no handleStealthMouseMove:", err); exitStealth(); }} function enterStealth() { if (!wrapper || !document.body.contains(wrapper)) return; stealthOn = true; wrapper.classList.add('stealth-mode'); toggleBox.classList.add('active'); wrapper.style.opacity = 1; wrapper.style.pointerEvents = 'auto'; try { rect = wrapper.classList.contains('minimized') ? header.getBoundingClientRect() : wrapper.getBoundingClientRect(); if (!rect || rect.width === 0 || rect.height === 0) { throw new Error("Rect inválido ao entrar no modo disfarçado."); } document.addEventListener('mousemove', handleStealthMouseMove); wrapper.style.opacity = 0; wrapper.style.pointerEvents = 'none'; } catch (err) { console.error("Erro ao entrar no modo disfarçado:", err); stealthOn = false; wrapper.classList.remove('stealth-mode'); toggleBox.classList.remove('active'); wrapper.style.opacity = 1; wrapper.style.pointerEvents = 'auto'; showCustomAlert("Erro ao ativar Modo Disfarçado.", "error"); } } function exitStealth() { stealthOn = false; document.removeEventListener('mousemove', handleStealthMouseMove); if (wrapper && document.body.contains(wrapper)) { wrapper.classList.remove('stealth-mode'); toggleBox.classList.remove('active'); wrapper.style.opacity = 1; wrapper.style.pointerEvents = 'auto'; } rect = null; } function showStealthOverlay() { const ov = document.createElement('div'); ov.id = 'bmOv'; ov.innerHTML = `<div id="bmOvContent"><img src="https://i.imgur.com/RquEok4.gif" alt="Demo"/> <p>O Modo Disfarçado oculta a janela quando o mouse não está sobre ela. Mova o mouse para a área da janela para revelá-la.</p> <button id="bmOvBtn" class="bmDialogButton">Entendido</button></div>`; document.body.appendChild(ov); document.getElementById('bmOvBtn').onclick = () => { ov.style.opacity = 0; setTimeout(() => { if (document.body.contains(ov)){ ov.remove(); } }, 500); enterStealth(); }; } toggleWrapper.onclick = () => { if (!stealthOn) { if (firstTimeStealth) { firstTimeStealth = false; showStealthOverlay(); } else { enterStealth(); } } else { exitStealth(); } };
        const darkModeToggleWrapper = document.getElementById('bmDarkModeToggleWrapper'); const darkModeToggleBox = document.getElementById('bmDarkModeToggleImg'); let isDarkModeOn = false; darkModeToggleWrapper.onclick = () => { isDarkModeOn = !isDarkModeOn; darkModeToggleBox.classList.toggle('active', isDarkModeOn); document.body.classList.toggle('bm-dark-mode', isDarkModeOn); console.log("Dark Mode Página:", isDarkModeOn ? "ON" : "OFF"); };

        // Lógica Botão "Iniciar Digitação" (Mantida)
        const startButton = document.getElementById('bmBtn');
        const correctButton = document.getElementById('bmBtnCorrect');
        startButton.onclick = async function() { /* ... código mantido ... */ };

        // --- LÓGICA CORREÇÃO AUTOMÁTICA ---
        // Funções auxiliares da correção (showModeSelectionDialog, etc.) mantidas
        async function showModeSelectionDialog() { /* ... código mantido ... */ const buttons = [ { text: 'Básico', value: 'basic', class: 'secondary' }, { text: 'Avançado', value: 'advanced' } ]; return await showCustomAlert( 'Escolha o modo de correção:', 'question', buttons, 'bmModeSelectionDialog' ); }
        async function showBasicModeConfirmationDialog() { /* ... código mantido ... */ const buttons = [ { text: 'Cancelar', value: false, class: 'secondary' }, { text: 'Continuar (Básico)', value: true } ]; return await showCustomAlert( 'Modo Básico:\nA correção será totalmente automática, mas pode haver mais erros ou sugestões inadequadas.\nNenhuma tela de correção será exibida.', 'warning', buttons, 'bmBasicConfirmDialog' ); }
        function getContextAroundError(fullText, errorText, wordsBefore = 5, wordsAfter = 3) { /* ... código mantido ... */ const words = fullText.split(/(\s+)/); const errorWords = errorText.trim().split(/(\s+)/); let startIndex = -1; for (let i = 0; i <= words.length - errorWords.length; i++) { let match = true; for (let j = 0; j < errorWords.length; j++) { if (words[i + j] !== errorWords[j]) { match = false; break; } } if (match) { startIndex = i; break; } } if (startIndex === -1) { return { before: `(Contexto não encontrado para "${errorText}")`, error: errorText, after: "" }; } const endIndex = startIndex + errorWords.length; let beforeContext = []; let wordsCountedBefore = 0; for (let i = startIndex - 1; i >= 0 && wordsCountedBefore < wordsBefore; i--) { beforeContext.unshift(words[i]); if (words[i].trim().length > 0) { wordsCountedBefore++; } } let afterContext = []; let wordsCountedAfter = 0; for (let i = endIndex; i < words.length && wordsCountedAfter < wordsAfter; i++) { afterContext.push(words[i]); if (words[i].trim().length > 0) { wordsCountedAfter++; } } const joinWithSpace = (arr) => arr.join(''); return { before: joinWithSpace(beforeContext), error: errorText, after: joinWithSpace(afterContext) }; }
        function showAdvancedCorrectionSplash(initialMessage = "Preparando correção avançada...") { /* ... código mantido ... */ if (correctionSplashEl) { const h2 = correctionSplashEl.querySelector('h2'); if (h2) h2.textContent = initialMessage; const contextDisplay = correctionSplashEl.querySelector('.bmAdvContextDisplay'); const suggestionButtons = correctionSplashEl.querySelector('.bmAdvSuggestionButtons'); const actionButtons = correctionSplashEl.querySelector('.bmAdvActionButtons'); if(contextDisplay) contextDisplay.innerHTML = 'Carregando contexto...'; if(suggestionButtons) suggestionButtons.innerHTML = ''; if(actionButtons) actionButtons.innerHTML = ''; if (!correctionSplashEl.classList.contains('visible')) { correctionSplashEl.style.opacity = 0; void correctionSplashEl.offsetWidth; correctionSplashEl.classList.add('visible'); } return; } correctionSplashEl = document.createElement('div'); correctionSplashEl.id = 'bmAdvCorrectionSplash'; correctionSplashEl.innerHTML = ` <div id="bmAdvSplashContent" class="bmAdvSplashContent"> <h2>${initialMessage}</h2> <div class="bmAdvContextDisplay">Carregando contexto...</div> <div class="bmAdvOptionsContainer"> <div class="bmAdvSuggestionButtons"> </div> <div class="bmAdvActionButtons"> </div> </div> <div class="bmAdvLoadingState"> <div class="spinner"></div> <div class="applying-text">Processando...</div> </div> </div>`; document.body.appendChild(correctionSplashEl); void correctionSplashEl.offsetWidth; correctionSplashEl.classList.add('visible'); }
        async function updateAdvancedCorrectionSplash(context, suggestions) { /* ... código mantido ... */ if (!correctionSplashEl || !document.body.contains(correctionSplashEl)) return; const splashContent = correctionSplashEl.querySelector('#bmAdvSplashContent'); const h2 = splashContent.querySelector('h2'); const contextDisplay = splashContent.querySelector('.bmAdvContextDisplay'); const suggestionContainer = splashContent.querySelector('.bmAdvSuggestionButtons'); const actionContainer = splashContent.querySelector('.bmAdvActionButtons'); const loadingState = splashContent.querySelector('.bmAdvLoadingState'); h2.textContent = 'Escolha a Correção:'; loadingState.style.display = 'none'; contextDisplay.style.opacity = 0; contextDisplay.style.transform = 'translateY(10px)'; await new Promise(r => setTimeout(r, 50)); contextDisplay.innerHTML = `<span class="context-before">${context.before}</span> <span class="error-word">${context.error}</span> <span class="context-after">${context.after}</span>`; contextDisplay.style.opacity = 1; contextDisplay.style.transform = 'translateY(0)'; suggestionContainer.innerHTML = ''; suggestions.forEach((sug, index) => { const btn = document.createElement('button'); btn.className = 'bmAdvSuggestionButton'; btn.textContent = sug; btn.style.opacity = 0; btn.style.transform = 'scale(0.8)'; btn.style.animation = `advButtonPopIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) ${0.1 + index * 0.08}s forwards`; btn.onclick = () => { if (currentCorrectionResolver) { currentCorrectionResolver({ type: 'suggestion', value: sug }); currentCorrectionResolver = null; showApplyingStateInSplash("Aplicando sugestão..."); } }; suggestionContainer.appendChild(btn); }); actionContainer.innerHTML = ''; const manualBtn = document.createElement('button'); manualBtn.className = 'bmAdvActionButton manual'; manualBtn.textContent = 'Escrever Manualmente'; manualBtn.style.opacity = 0; manualBtn.style.transform = 'translateX(-20px)'; manualBtn.style.animation = `advActionButtonSlideIn 0.5s ease-out ${0.1 + suggestions.length * 0.08}s forwards`; manualBtn.onclick = () => { if (currentCorrectionResolver) { console.log("Botão Manual Clicado. Usando prompt()."); const manualText = prompt("Digite a correção manualmente:", context.error); if (manualText !== null) { console.log("Prompt OK:", manualText); currentCorrectionResolver({ type: 'manual', value: manualText }); currentCorrectionResolver = null; showApplyingStateInSplash("Aplicando correção manual..."); } else { console.log("Prompt Cancelado."); currentCorrectionResolver({ type: 'skip' }); currentCorrectionResolver = null; showApplyingStateInSplash("Operação manual cancelada."); } } }; actionContainer.appendChild(manualBtn); const skipBtn = document.createElement('button'); skipBtn.className = 'bmAdvActionButton skip'; skipBtn.textContent = 'Pular Erro'; skipBtn.style.opacity = 0; skipBtn.style.transform = 'translateX(20px)'; skipBtn.style.animation = `advActionButtonSlideIn 0.5s ease-out ${0.15 + suggestions.length * 0.08}s forwards`; skipBtn.onclick = () => { if (currentCorrectionResolver) { currentCorrectionResolver({ type: 'skip' }); currentCorrectionResolver = null; showApplyingStateInSplash("Pulando erro..."); } }; actionContainer.appendChild(skipBtn); if (!document.getElementById('bmAdvButtonAnimations')) { const animStyle = document.createElement('style'); animStyle.id = 'bmAdvButtonAnimations'; animStyle.textContent = ` @keyframes advButtonPopIn { from { opacity: 0; transform: scale(0.8) rotate(-15deg); } to { opacity: 1; transform: scale(1) rotate(0deg); } } @keyframes advActionButtonSlideIn { from { opacity: 0; transform: translateX(var(--slide-direction, -20px)); } to { opacity: 1; transform: translateX(0); } } .bmAdvActionButton.manual { --slide-direction: -20px; } .bmAdvActionButton.skip { --slide-direction: 20px; } `; document.head.appendChild(animStyle); } return new Promise(resolve => { currentCorrectionResolver = resolve; }); }
        function showApplyingStateInSplash(message = "Aplicando alterações...") { /* ... código mantido ... */ if (!correctionSplashEl || !document.body.contains(correctionSplashEl)) return; const loadingState = correctionSplashEl.querySelector('.bmAdvLoadingState'); const applyingText = loadingState.querySelector('.applying-text'); if (loadingState) { if(applyingText) applyingText.textContent = message; loadingState.style.display = 'flex'; loadingState.style.opacity = 0; void loadingState.offsetWidth; loadingState.style.transition = 'opacity 0.3s ease-in'; loadingState.style.opacity = 1; } }
        function hideAdvancedCorrectionSplash() { /* ... código mantido ... */ if (!correctionSplashEl || !document.body.contains(correctionSplashEl)) return; correctionSplashEl.classList.remove('visible'); const content = correctionSplashEl.querySelector('#bmAdvSplashContent'); if (content) { content.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-in'; content.style.opacity = 0; content.style.transform = 'scale(0.9) rotateY(-10deg)'; } setTimeout(() => { if (correctionSplashEl && document.body.contains(correctionSplashEl)) { correctionSplashEl.remove(); } correctionSplashEl = null; }, 500); }

        // --- Evento Click do Botão Corrigir ---
        correctButton.onclick = async function () {
            if (isCorrectionRunning) { showCustomAlert('Correção já em andamento.', 'warning'); return; }
            isCorrectionRunning = true;
            const btnCorrect = this; btnCorrect.disabled = true; if (startButton) startButton.disabled = true;
            console.log('Solicitando modo de correção...');
            let correctionMode = null;
            let targetTextarea = null;
            let correctionProcessRan = false;
            let finalMessage = "Nenhuma ação realizada.";
            let finalType = "info";
            let aiLoadingOverlayElement = null; // Para guardar a referência do overlay de loading da IA

            try {
                correctionMode = await showModeSelectionDialog();
                if (correctionMode === 'basic') { console.log('Modo Básico selecionado. Confirmando...'); const confirmBasic = await showBasicModeConfirmationDialog(); if (!confirmBasic) { throw new Error("Modo Básico cancelado pelo usuário."); } console.log('Modo Básico confirmado.'); }
                else if (correctionMode === 'advanced') { console.log('Modo Avançado selecionado.'); }
                else { throw new Error("Nenhum modo de correção selecionado."); }

                // --- Verificações Iniciais ---
                // ... (código mantido) ...
                let initialChecksOk = false; let needsCountdown = false;
                if (correctionMode === 'advanced') { showAdvancedCorrectionSplash("Verificando status da página..."); await new Promise(r => setTimeout(r, 300)); }
                else { console.log("Modo Básico: Verificando status (silenciosamente)..."); }
                try {
                    let concludeButtonExists = false; const allButtons = document.querySelectorAll('button'); for (const btn of allButtons) { if (btn.textContent.trim() === "Concluir") { concludeButtonExists = true; console.log("Botão 'Concluir' encontrado."); break; } }
                    if (!concludeButtonExists) { console.log("'Concluir' não encontrado, procurando 'CORRIGIR ONLINE'..."); const correctorButtons = document.querySelectorAll('button'); let foundCorrectorButton = null; let foundWaitingButton = null; for (const button of correctorButtons) { const buttonText = button.textContent; if (buttonText && buttonText.includes("CORRIGIR ONLINE")) { if (buttonText.trim() === "CORRIGIR ONLINE") { foundCorrectorButton = button; } else { foundWaitingButton = button; break; } } } if (foundWaitingButton) { throw new Error("'Corrigir Online' está em processo de espera. Tente novamente mais tarde."); } else if (foundCorrectorButton) { console.log("Botão 'CORRIGIR ONLINE' encontrado e pronto."); if (correctionMode === 'advanced') { showApplyingStateInSplash("Iniciando correção online..."); await new Promise(r => setTimeout(r, 1000)); } else { console.log("Modo Básico: Clicando em 'CORRIGIR ONLINE'..."); } foundCorrectorButton.click(); console.log("Clicou em 'CORRIGIR ONLINE'. Esperando 'PROCESSANDO' desaparecer..."); const processingSelector = 'div.sc-kAyceB.kEYIQb'; await waitForElementToDisappear(processingSelector, 45000); console.log("'PROCESSANDO' desapareceu."); needsCountdown = true; } else { console.log("Botão 'CORRIGIR ONLINE' não encontrado."); } }
                    console.log("Procurando textarea alvo..."); targetTextarea = await waitForElement('textarea[id*="multiline"][class*="jss"]', 3000); console.log('Textarea encontrada.'); activeEl = targetTextarea; initialChecksOk = true;
                    if (needsCountdown) { console.log("Iniciando contagem regressiva (3s)..."); if (correctionMode === 'advanced') { showApplyingStateInSplash("Preparando para corrigir..."); } for (let n = 3; n >= 1; n--) { const cnt = document.createElement('div'); cnt.className = 'bmCorrectionCountdownNumber'; cnt.textContent = n; document.body.appendChild(cnt); await new Promise(r => setTimeout(r, 950)); if (document.body.contains(cnt)) document.body.removeChild(cnt); } console.log("Contagem finalizada."); }
                } catch (error) { console.error("Erro durante verificações iniciais:", error); const errorMsg = error.message.includes('Timeout') ? `Timeout esperando elemento: ${error.message.split(': ')[1]}` : error.message.includes("'Corrigir Online'") ? error.message : error.message.includes('Textarea') ? 'Textarea alvo não encontrada!' : 'Erro inesperado nas verificações iniciais.'; showCustomAlert(errorMsg, 'error'); throw error; }


                // --- Busca e Correção dos Spans ---
                if (!initialChecksOk || !targetTextarea) { throw new Error("Não foi possível iniciar a correção (falha nas verificações)."); }
                console.log("Procurando spans de erro..."); if (correctionMode === 'advanced') { const h2 = correctionSplashEl?.querySelector('h2'); if (h2) h2.textContent = 'Procurando erros...'; }
                const errorSpans = Array.from(document.querySelectorAll('span[style*="background-color: rgb"][style*="cursor: pointer"]')); let correctedCount = 0; let skippedCount = 0; let errorCount = 0;
                if (errorSpans.length === 0) {
                     console.log('Nenhum span de erro encontrado.');
                     finalMessage = "Nenhum erro encontrado para correção.";
                     finalType = "info";
                     correctionProcessRan = true;
                }
                else {
                    console.log(`Encontrados ${errorSpans.length} spans de erro potenciais.`);
                    correctionProcessRan = true;
                    for (let i = 0; i < errorSpans.length; i++) {
                        // ... (TODA a lógica interna do loop FOR para processar cada span é MANTIDA EXATAMENTE IGUAL - V1.8) ...
                        const errorSpan = errorSpans[i];
                        if (!document.body.contains(errorSpan) || errorSpan.offsetParent === null) { console.log(`Span ${i + 1} inválido ou oculto, pulando.`); continue; }
                        const errorTextForContext = errorSpan.textContent; const errorTextTrimmed = errorTextForContext.trim(); let actionType = 'none'; let chosenCorrection = null;
                        if (!errorTextTrimmed && !errorTextForContext) { console.log(`Span ${i + 1} completamente vazio, pulando.`); continue; }
                        console.log(`--- Processando erro ${i + 1}/${errorSpans.length}: "${errorTextTrimmed || errorTextForContext}" ---`);
                        try {
                            errorSpan.scrollIntoView({ behavior: 'smooth', block: 'center' }); await new Promise(r => setTimeout(r, SCROLL_DELAY + 50));
                            errorSpan.click(); console.log(`Clicou no span: "${errorTextTrimmed || errorTextForContext}"`); await new Promise(r => setTimeout(r, 50));
                            let suggestions = [];
                            try {
                                console.log("Esperando menu de sugestão anterior desaparecer (se existir)...");
                                try { await waitForElementToDisappear('ul#menu-list-grow', 350); console.log("Menu anterior desapareceu ou não existia."); }
                                catch (disappearError) { console.log("Timeout/Erro esperando menu anterior sumir, OK para continuar."); }
                                console.log("Esperando novo menu de sugestão aparecer...");
                                const suggestionList = await waitForElement('ul#menu-list-grow', 750);
                                console.log("Menu de sugestão encontrado.");
                                await new Promise(r => setTimeout(r, 60));
                                const suggestionItems = suggestionList.querySelectorAll('li');
                                suggestions = Array.from(suggestionItems).slice(1).map(li => li.textContent.trim()).filter(text => text.length > 0 && text.length < 50);
                                if(suggestions.length === 0){ console.warn(`Menu encontrado, mas sem sugestões válidas para "${errorTextTrimmed}". Itens LI:`, suggestionItems.length); }
                                else { console.log(`Sugestões encontradas para "${errorTextTrimmed}":`, suggestions); }
                            } catch (e) {
                                console.warn(`Não encontrou lista de sugestões para "${errorTextTrimmed}" após o clique e espera.`); document.body.click(); await new Promise(r => setTimeout(r, MIN_DELAY));
                                if (correctionMode === 'advanced') { const fullText = targetTextarea.value; const context = getContextAroundError(fullText, errorTextForContext, ADV_CONTEXT_WORDS, ADV_CONTEXT_WORDS); const userAction = await updateAdvancedCorrectionSplash(context, []); actionType = userAction.type; chosenCorrection = userAction.value; }
                                else { errorCount++; actionType = 'error'; }
                            }
                            if(actionType === 'none') {
                                if (suggestions.length === 0) {
                                    if (correctionMode === 'advanced') { const fullText = targetTextarea.value; const context = getContextAroundError(fullText, errorTextForContext, ADV_CONTEXT_WORDS, ADV_CONTEXT_WORDS); const userAction = await updateAdvancedCorrectionSplash(context, []); actionType = userAction.type; chosenCorrection = userAction.value; }
                                    else { errorCount++; actionType = 'error'; }
                                } else if (suggestions.length === 1 || correctionMode === 'basic') { chosenCorrection = suggestions[0]; actionType = 'auto'; console.log(`Aplicando automaticamente: "${errorTextTrimmed}" -> "${chosenCorrection}" (Modo: ${correctionMode})`); if (correctionMode === 'advanced') { const fullText = targetTextarea.value; const context = getContextAroundError(fullText, errorTextForContext, ADV_CONTEXT_WORDS, ADV_CONTEXT_WORDS); showApplyingStateInSplash(`Aplicando: ${context.error} → ${chosenCorrection}`); await new Promise(r => setTimeout(r, 800)); } }
                                else { const fullText = targetTextarea.value; const context = getContextAroundError(fullText, errorTextForContext, ADV_CONTEXT_WORDS, ADV_CONTEXT_WORDS); const userAction = await updateAdvancedCorrectionSplash(context, suggestions); actionType = userAction.type; chosenCorrection = userAction.value; console.log(`Ação do usuário: ${actionType}, Valor: ${chosenCorrection}`); }
                            }
                            if ((actionType === 'suggestion' || actionType === 'manual' || actionType === 'auto') && chosenCorrection !== null) {
                                const originalErrorText = errorTextForContext;
                                if (!originalErrorText) { console.warn("Span de erro com texto original vazio, não é possível aplicar correção."); errorCount++; }
                                else {
                                    const currentTextValue = targetTextarea.value; const errorIndex = currentTextValue.indexOf(originalErrorText);
                                    if (errorIndex !== -1) {
                                        console.log(`Encontrado "${originalErrorText}" no índice ${errorIndex}. Substituindo por "${chosenCorrection}".`);
                                        try {
                                            targetTextarea.focus({ preventScroll: true }); await new Promise(r => setTimeout(r, MIN_DELAY));
                                            const newValue = currentTextValue.substring(0, errorIndex) + chosenCorrection + currentTextValue.substring(errorIndex + originalErrorText.length);
                                            const prototype = Object.getPrototypeOf(targetTextarea); const valueSetter = Object.getOwnPropertyDescriptor(prototype, 'value')?.set; const event = new Event('input', { bubbles: true });
                                            if (valueSetter) { valueSetter.call(targetTextarea, newValue); } else { targetTextarea.value = newValue; }
                                            targetTextarea.dispatchEvent(event); targetTextarea.dispatchEvent(new Event('change', { bubbles: true }));
                                            const newCursorPos = errorIndex + chosenCorrection.length; targetTextarea.selectionStart = newCursorPos; targetTextarea.selectionEnd = newCursorPos; console.log(`Cursor definido para ${newCursorPos}.`);
                                            targetTextarea.scrollIntoView({ behavior: 'smooth', block: 'center' }); await new Promise(r => setTimeout(r, SCROLL_DELAY));
                                            correctedCount++; console.log(`Correção aplicada (${actionType}): "${originalErrorText}" -> "${chosenCorrection}"`);
                                            if(errorSpan.parentNode) { errorSpan.style.backgroundColor = 'transparent'; errorSpan.style.cursor = 'default'; }
                                        } catch (e) { console.error("Erro durante a substituição direta do valor:", e); errorCount++; actionType = 'error'; }
                                    } else { console.warn(`Texto "${originalErrorText}" não foi encontrado na textarea (${i+1}/${errorSpans.length}) para aplicar correção. Valor atual:\n${targetTextarea.value.substring(0, 500)}...`); errorCount++; actionType = 'error'; }
                                }
                            }
                            if (actionType === 'skip') { skippedCount++; console.log(`Erro "${errorTextTrimmed}" pulado.`); }
                            else if (actionType === 'error') { console.log(`Erro "${errorTextTrimmed}" não pôde ser corrigido.`); }
                            document.body.click(); await new Promise(r => setTimeout(r, MIN_DELAY * 2));
                        } catch (error) { console.error(`Erro geral ao processar span "${errorTextTrimmed}":`, error); errorCount++; try { document.body.click(); } catch (e) {} await new Promise(r => setTimeout(r, MIN_DELAY)); if (error.message === "Correção interrompida.") { break; } }
                        await new Promise(r => setTimeout(r, STEP_DELAY));
                    } // --- Fim do loop FOR ---

                     console.log('Processamento de spans concluído.');
                     const processedCount = correctedCount + skippedCount + errorCount;
                     if (processedCount === 0 && errorSpans.length > 0) { finalMessage = "Nenhum erro processável encontrado nos spans destacados."; }
                     else if (correctedCount > 0 && skippedCount === 0 && errorCount === 0) { finalMessage = `Correção finalizada! ${correctedCount} erros processados com sucesso.`; finalType = "success"; }
                     else if (correctedCount > 0 || skippedCount > 0 || errorCount > 0) { finalMessage = `Correção concluída: ${correctedCount} corrigido(s), ${skippedCount} pulado(s), ${errorCount} erro(s).`; if (errorCount > 0) finalType = "warning"; else if (correctedCount > 0) finalType = "success"; else finalType = "info"; }
                } // Fim else (errorSpans > 0)

                // --- Finalização e Etapa de IA Opcional ---
                if (correctionMode === 'advanced' && correctionSplashEl) { // Esconde o splash SÓ se ele existir
                    showApplyingStateInSplash("Finalizando...");
                    const randomDelay = Math.floor(Math.random() * 500) + 200; // Delay curto
                    console.log(`Aguardando ${randomDelay}ms antes de finalizar...`); await new Promise(r => setTimeout(r, randomDelay));
                    hideAdvancedCorrectionSplash();
                 } else {
                    console.log("Modo Básico: Finalizando ou Splash Avançado não exibido.");
                    await new Promise(r => setTimeout(r, 50)); // Pausa mínima
                 }

                // *** MUDANÇA: Usa as novas funções de UI ***
                if (correctionProcessRan && targetTextarea && document.body.contains(targetTextarea)) {
                     const wantAIReview = await showAIReviewOverlayStyled(); // <<< USA NOVA UI AQUI
                     if (wantAIReview) {
                         console.log("Usuário optou pela revisão da IA.");
                         aiLoadingOverlayElement = showAILoadingOverlayStyled(); // <<< USA NOVA UI LOADING

                         try {
                             const currentText = targetTextarea.value;
                             if (!currentText.trim()) { throw new Error("A caixa de texto está vazia, não há nada para revisar."); }
                             const aiCorrectedText = await callPuterAI(currentText);
                             console.log("IA retornou correção. Limpando e reescrevendo RAPIDAMENTE...");

                              removeOverlay(aiLoadingOverlayElement); // Remove o loading
                              aiLoadingOverlayElement = null; // Limpa a referência

                              await clearTextareaSimulated(targetTextarea);
                              await typeTextFast(aiCorrectedText, targetTextarea); // <<< USA DELAY 0 AQUI
                              finalMessage += "\nRevisão final da IA aplicada.";
                              finalType = "success";
                         } catch (aiError) {
                             console.error("Erro durante o processo da IA:", aiError);
                              removeOverlay(aiLoadingOverlayElement); // Garante remover o loading em caso de erro
                              aiLoadingOverlayElement = null;
                              // Mostra o erro usando o showCustomAlert normal
                              await showCustomAlert(`Erro na revisão da IA: ${aiError.message}`, 'error');
                         }
                     } else { console.log("Usuário pulou a revisão da IA."); }
                 } else if (!targetTextarea || !document.body.contains(targetTextarea)) { console.log("Textarea alvo não encontrada no final, pulando diálogo da IA."); }
                 else { console.log("Processo de correção não executado, pulando diálogo da IA."); }

                 // Mostra a mensagem final usando o showCustomAlert normal
                 showCustomAlert(finalMessage, finalType);

            } catch (e) {
                 // ... (bloco catch mantido) ...
                 console.error("Erro geral no fluxo de correção:", e);
                 if (e.message !== "Modo Básico cancelado pelo usuário." && e.message !== "Nenhum modo de correção selecionado.") {
                      if (!e.message.includes("Timeout") && !e.message.includes("Tente novamente") && !e.message.includes("encontrada")) {
                           showCustomAlert(`Ocorreu um erro inesperado: ${e.message}`, 'error');
                      }
                 }
                 if (correctionMode === 'advanced' && correctionSplashEl) hideAdvancedCorrectionSplash(); // Garante esconder
            } finally {
                 // ... (bloco finally mantido, com remoção extra de overlays) ...
                 console.log("--- Correção Automática Finalizada (Bloco Finally) ---");
                 isCorrectionRunning = false;
                 btnCorrect.disabled = false;
                 if (startButton) startButton.disabled = false;
                 currentCorrectionResolver = null;
                 if (correctionSplashEl && document.body.contains(correctionSplashEl)) { hideAdvancedCorrectionSplash(); }
                 removeOverlay(aiLoadingOverlayElement); // Garante remover o loading se ainda existir
                 removeOverlay(document.getElementById('bmAIReviewSplash')); // Garante remover prompt se ainda existir
                 // Remove alertas genéricos que possam ter ficado presos
                 const genericOverlay = document.getElementById('bmAlertOverlay');
                 if(genericOverlay) genericOverlay.remove();
                 const modeSelection = document.getElementById('bmModeSelectionDialog');
                 if(modeSelection) modeSelection.remove();
                 const basicConfirm = document.getElementById('bmBasicConfirmDialog');
                 if(basicConfirm) basicConfirm.remove();

            }
        }; // Fim onclick correctButton

    }, splashTimeout); // Fim do setTimeout principal

})(); // Fim da IIFE
